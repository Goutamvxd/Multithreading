Thread priorities
---------------------------------------------------
Thread priority Range: 1 to 10
1:min priority-->Thread.
5:normal priority
10:max priority

-----------------------------------------------
Every Thread in java has some priority
it may be default priority  generated by JVM
or customized priority  provided by programmer

The valid range of thread priority is 1 to 10
where 1 is min priority
      10 is max priority

Thread class defines the following constants to represent some standard priorities

Thread.MIN.PRIORITY --1
Thread.NORM.PRIORITY --5
Thread.MAX.PRIORITY --10



--------------------------
Thread Schedular will use priorities while allocating processor

Thread which is having heighest priority will get chance first


if two threads having same priority then we can't except exact execution order it depends on thread schedular

-------------------------------------
Thread class defines the following methods to get and set priority of a thread

public final int getPriority()

public final void setPriority(int p)

allowed values range 1 to 10

other wise runtime exception :IllegalArgumentException

t.setPriority(7)  -- valid
t.setPriority(17) --IllegalArgumentException

--------------------------------------------------------
Default priority

The deafult priority only for the main thread is 5
but for all remaining threads the default priority will be inherited from parent to child i.e what ever priority parent thread has the same priority will be there for child the child thread.


class MyThread extends Thread{

}

class Test{

public static void main(String[] args){

//getting thread priority

System.out.println(Thread.currentThread().getPriority()); //--> 5

//setting thread priority


// It will through runtime exceprion (priority range must be within 1-10 only)
Thread.currentThread().setPriority(17);

System.out.println(Thread.currentThread().getPriority());

Thread.currentThread().setPriority(7);
System.out.println(Thread.current.Thread().getPriority()); //----> 7

// the child thread will get parent thread priority
MyThread t=new MyThread();
System.out.println(t.getPriority()); //--> 7





}
}


if we comment setPriority(7) line 
then child thread priority will became 5


------------------------------------------------
class MyThread extends Thread{
	public void run(){
	for(int i=0;i<5;i++);
	}
}
--
class PriorityDemo{
public static void main(String[] args){
MyThread t=new MyThread();
t.setPriority(10);
t.start();

for(int i=0;i<5;i++){
	System.out.println("Main Thread");
	}
}
}

if we are commenting setPriority(5) line
then both main and child threads have the same priority 5
and hence we cannot except execution order and exact output



if we are not commenting that line main thread has priority 5 and child thread has priority of 10
and hence child thread will get the chance first followed by main thread,


in this case output is 

child thread * 5times
main thread *5times




note: some platform won't provide proper support for thread priorities